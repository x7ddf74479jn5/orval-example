/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  Pets,
  Error,
  ListPetsParams,
  Pet,
  CreatePetsBody
} from '../model'
import { customInstance } from '../mutator/custom-instance';


  type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


  /**
 * @summary List all pets
 */
export const listPets = (
    params?: ListPetsParams,
 ) => {
      return customInstance<Pets>(
      {url: `/pets`, method: 'get',
        params
    },
      );
    }
  

export const getListPetsKey = (params?: ListPetsParams,) => [`/pets`, ...(params ? [params]: [])] as const;

    
export type ListPetsQueryResult = NonNullable<Awaited<ReturnType<typeof listPets>>>
export type ListPetsQueryError = Error

/**
 * @summary List all pets
 */
export const useListPets = <TError = Error>(
 params?: ListPetsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof listPets>>, TError> & { swrKey?: Key, enabled?: boolean },  }

  ) => {

  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getListPetsKey(params) : null);
  const swrFn = () => listPets(params, );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * @summary Create a pet
 */
export const createPets = (
    createPetsBody: CreatePetsBody,
 ) => {
      return customInstance<Pet>(
      {url: `/pets`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createPetsBody
    },
      );
    }
  


/**
 * @summary Info for a specific pet
 */
export const showPetById = (
    petId: string,
 ) => {
      return customInstance<Pet>(
      {url: `/pets/${petId}`, method: 'get'
    },
      );
    }
  

export const getShowPetByIdKey = (petId: string,) => [`/pets/${petId}`] as const;

    
export type ShowPetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof showPetById>>>
export type ShowPetByIdQueryError = Error

/**
 * @summary Info for a specific pet
 */
export const useShowPetById = <TError = Error>(
 petId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof showPetById>>, TError> & { swrKey?: Key, enabled?: boolean },  }

  ) => {

  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(petId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getShowPetByIdKey(petId) : null);
  const swrFn = () => showPetById(petId, );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


